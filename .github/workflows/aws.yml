name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: ap-northeast-2
  AWS_ECR_REGISTRY: 886436935413.dkr.ecr.ap-northeast-2.amazonaws.com
  AWS_ECR_REPOSITORY: sound-bind
  AWS_ECS_SERVICE: soundbind-service
  AWS_ECS_CLUSTER: soundbind-cluster
  AWS_ECS_TASK_DEFINITION: soundbind-task-revision.json
  AWS_CONTAINER_NAME: soundbind-container
  DOCKER_COMPOSE_FILE: docker-compose-dev.yml
  CONFIG_SERVER_HOST_KEY: ${{ secrets.CONFIG_SERVER_HOST_KEY }}
  CONFIG_SERVER_PRIVATE_KEY: ${{ secrets.CONFIG_SERVER_PRIVATE_KEY }}
  MYSQL_DB_PASSWORD: ${{ secrets.MYSQL_DB_PASSWORD }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push images to Amazon ECR
        id: build-push
        run: |
          services=$(docker compose -f $DOCKER_COMPOSE_FILE config --services)
          for service in $services; do
            image_name=${AWS_ECR_REGISTRY}/$AWS_ECR_REPOSITORY:$service-latest
            docker compose -f $DOCKER_COMPOSE_FILE build $service
            docker tag soundbind/${service}:latest $image_name
            docker push $image_name
          done

      - name: Fill in the new image IDs in the Amazon ECS task definition
        run: |
          services=$(docker compose -f $DOCKER_COMPOSE_FILE config --services)
          for service in $services; do
            image_name=${AWS_ECR_REGISTRY}/$AWS_ECR_REPOSITORY:$service-latest
            ecs_task_def=$(jq --arg service $service --arg image $image_name \
              '.containerDefinitions[] | select(.name == $service) | .image = $image' \
              ${{ env.AWS_ECS_TASK_DEFINITION }} > tmp.json && mv tmp.json ${{ env.AWS_ECS_TASK_DEFINITION }})
          done

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.AWS_ECS_TASK_DEFINITION }}
          service: ${{ env.AWS_ECS_SERVICE }}
          cluster: ${{ env.AWS_ECS_CLUSTER }}
          wait-for-service-stability: true